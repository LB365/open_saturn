# Ansible playbook for deploying a Flask app

---
# Install system apt packages

- hosts: webservers
  become: yes
  become_method: sudo
  tasks:
    - name: update cache
      apt: name=python-software-properties state=present update_cache=yes cache_valid_time=43200
    - name: disable lighttpd
      systemd: name=lighttpd state=stopped enabled=no  # To avoid conflicts with nginx
    - name: install packages
      apt: name={{item}} state=installed
      with_items:
        - python3-pip
        - python3
        - nginx
        - conda
        - postgresql
    - name: add application group
      group:
        name: '{{ansible_ssh_user}}'
    - name: add application user
      user:
        name: '{{ansible_ssh_user}}'
        home: '{{app_name}}'
        comment: Application User
        shell: /bin/bash
        groups:
          - '{{ansible_ssh_user}}'
    - name: check if miniconda3 installer exists
      stat:
        path: /tmp/miniconda3.sh
      register: conda_installer
    - name: download the miniconda installer
      ansible.builtin.get_url:
        url: https://repo.anaconda.com/miniconda/Miniconda3-py38_4.9.2-Linux-x86_64.sh
        dest: /tmp/miniconda3.sh
        checksum: md5:122c8c9beb51e124ab32a0fa6426c656
        mode: o+rx
      when: not conda_installer.stat.exists
    - name: install miniconda
      shell:
        creates: '{{app_name}}/miniconda3'
        cmd: '/tmp/miniconda3.sh -b'
      become: true
      become_user: '{{ansible_ssh_user}}'

# Install the app, note: don't do these tasks with become sudo
- hosts: webservers
  tasks:
    - name: install postgres
      shell:
        cmd: /home/{{ ansible_ssh_user }}/{{ app_name }}/env/conda install -y -c conda-forge postgresql'
        creates: '{{app_name}}/miniconda3/initdb'
      become: yes
      become_user: '{{ansible_ssh_user}}'
    - name: clone repo
      git:
        repo: 'https://github.com/{{ github_user }}/{{ app_name }}.git'
        dest: /home/{{ ansible_ssh_user }}/{{ app_name }}
        update: yes  # Does a git pull if the repo already exists
    - name: install modules in a virtualenv
      pip:
        editable: True
        virtualenv: /home/{{ ansible_ssh_user }}/{{ app_name }}/env
        virtualenv_python: python3.8

#
#
## Configure app systemd service and nginx
#- hosts: webservers
#  become: yes
#  become_method: sudo
#  tasks:
#  - name: template systemd service config
#    copy:
#      src: .ansible/.service.example
#      dest: /etc/systemd/system/{{ app_name }}.service
#  - name: start systemd app service
#    systemd: name={{ app_name }}.service state=restarted enabled=yes
#  - name: template nginx site config
#    template:
#      src: .ansible/.nginx.example
#      dest: /etc/nginx/sites-available/{{ app_name }}
#  - name: remove default nginx site config
#    file: path=/etc/nginx/sites-enabled/default state=absent
#  # - command: mv /etc/nginx/sites-enabled/default /tmp/nginx.sites-enabled.default
#  - name: enable nginx site
#    file:
#      src: /etc/nginx/sites-available/{{ app_name }}
#      dest: /etc/nginx/sites-enabled/default
#      state: link
#      force: yes
#  - name: restart nginx
#    systemd: name=nginx state=restarted enabled=yes
#  - name: open firewall for nginx
#    ufw:
#      rule: allow
#      name: Nginx Full